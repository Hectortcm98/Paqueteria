@model ML.Paquete
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div style="text-align: center;">
    <h2>Datos del Paquete</h2>
</div>


<style>
    body {
        background-color: #89BCB0; /* Color de fondo deseado */
    }
</style>




<style>
    #map {
        height: 300px;
    }
</style>

<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyCSKBDdPPlfca_zTwyxKiicRQn1qfgRjLw",
        v: "weekly",
    });
</script>

<div style="text-align: right;">
    <a href="@Url.Action("GetAll", "Paquetes")" float-right" id="btnRegresar">
        <img src="~/Imagen/devolver.png" style="width: 45px; height: 45px;" />
    </a>
</div>

@using (Html.BeginForm("Form", "Paquetes", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.IdPaquete)



    <div style="display: flex; flex-wrap: wrap;">
        <div style="flex-basis: 33.33%; padding: 5px;">


            <div style="display: flex; flex-direction: column; align-items: center;">
                <div style="margin-bottom: 10px;">
                    <label style="text-align: center;">
                        @Html.LabelFor(model => model.InstruccionEntrega)
                    </label>
                </div>
                <div>
                    @Html.TextBoxFor(model => model.InstruccionEntrega, new { @class = "form-control", @onkeyup = "soloLetras(this,'lblIntruccionEntrega')" })
                    <label id="lblIntruccionEntrega" style="color:red"></label>
                    <label class="text-danger">
                        @Html.ValidationMessageFor(model => model.InstruccionEntrega)
                    </label>
                </div>
            </div>

            <div style="display: flex; flex-direction: column; align-items: center;">
                <div style="margin-bottom: 10px;">
                    <label style="text-align: center;">
                        @Html.LabelFor(model => model.Peso)
                    </label>
                </div>
                <div>
                    @Html.TextBoxFor(model => model.Peso, new { @class = "form-control", @onkeyup = "soloNumerosDecimales(this,'lblPeso')" })
                    <label id="lblPeso" style="color:red"></label>
                    <label class="text-danger">
                        @Html.ValidationMessageFor(model => model.Peso)
                    </label>
                </div>
            </div>


        </div>

        <div style="flex-basis: 33.33%; padding: 5px;">

            <div style="flex-basis: 33.33%; padding: 5px;">

                <div style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 10px;">
                        <label style="text-align: center;">
                            @Html.LabelFor(model => model.FechaEstimadaEntrega)
                        </label>
                    </div>
                    <div>
                        @{
                            // Obtener la fecha actual con el formato adecuado
                            string fechaActual = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
                        }
                        @Html.TextBoxFor(model => model.FechaEstimadaEntrega, new { @class = "", @placeholder = "FechaEstimadaEntrega", @type = "date", @style = "width: 200px; height: 35px; padding: 10px;", @Value = fechaActual })

                    </div>
                </div>
            </div>


            <div style="display: flex; justify-content: center; margin-top: 10px;">
                <img src="~/Imagen/cajaCaje_1.png" class="card-img-top" style="max-width: 50%; height: auto;">
            </div>

        </div>

        <div style="flex-basis: 33.33%; padding: 5px;">


            @*<div style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 10px;">
                        <label style="text-align: center;">
                            @Html.LabelFor(model => model.CodigoQR)
                        </label>
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.CodigoQR, new { @class = "form-control", @onkeyup = "soloLetrasNumeros(this,'lblCodigo')" })
                        <label id="lblCodigo" style="color:red"></label>
                        <label class="text-danger">
                            @Html.ValidationMessageFor(model => model.CodigoQR)
                        </label>
                    </div>
                </div>*@

            @*<div style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 10px;">
                        <label style="text-align: center;">
                            @Html.LabelFor(model => model.NumeroGuia)
                        </label>
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.NumeroGuia, new { @class = "form-control", @onkeyup = "soloNumeros(this,'lblNumeroGuia')" })
                        <label id="lblNumeroGuia" style="color:red"></label>
                        <label class="text-danger">
                            @Html.ValidationMessageFor(model => model.NumeroGuia)
                        </label>
                    </div>
                </div>*@

            <div style="display: flex; flex-direction: column; align-items: center;">
                <div style="margin-bottom: 10px;">
                    <label style="text-align: center;">
                        @Html.LabelFor(model => model.DireccionOrigen)
                    </label>
                </div>
                <div>
                    @Html.TextBoxFor(model => model.DireccionOrigen, new { @class = "form-control", @onkeyup = "soloLetras(this,'lblDirecionOrigen')", @placeholder = "Selecciona un punto en el mapa", @id = "txtOrigen" })

                    <label id="lblDirecionOrigen" style="color:red"></label>
                    <label class="text-danger">
                        @Html.ValidationMessageFor(model => model.InstruccionEntrega)
                    </label>
                </div>
            </div>


            <div style="display: flex; flex-direction: column; align-items: center;">
                <div style="margin-bottom: 10px;">
                    <label style="text-align: center;">
                        @Html.LabelFor(model => model.DireccionEntrega)
                    </label>
                </div>
                <div>
                    @Html.TextBoxFor(model => model.DireccionEntrega, new { @class = "form-control", @onkeyup = "soloLetras(this,'lblDirecionEntrega')", @placeholder = "Selecciona un punto en el mapa", @id = "txtdireccion" })
                    <label id="lblDirecionEntrega" style="color:red"></label>
                    <label class="text-danger">
                        @Html.ValidationMessageFor(model => model.InstruccionEntrega)
                    </label>
                </div>
            </div>
        </div>




    </div>

    <br />
    <div id="map" class="border-top border-secondary border-3"></div>

    <div style="text-align: center; margin-top: 30px;">
        <button type="submit"  class="btn btn-outline-primary btn-s">Guardar</button>
    </div>



}





@*Para validar los cuadros de mi vista*@

<script>
    function soloLetras(input, label) {
        var valor = $(input).val();
        var soloLetras = valor.replace(/[^a-zA-Z\s.,áéíóúÁÉÍÓÚ]/g, ''); // Permitir letras, espacios, puntos, comas y acentos
        $(input).val(soloLetras); // Actualizar el valor del campo de texto solo con letras permitidas

        if (valor !== soloLetras) {
            $('#' + label).text("Solo se permiten letras, puntos, comas y acentos");
            $(input).css({ "border-color": "#F5B7B1", "background-color": "#F5B7B1" });
        } else {
            $('#' + label).text("");
            $(input).css({ "border-color": "green", "background-color": "#63f96f" });
        }
    }
</script>



<script>
    function soloNumeros(input, label) {
        var valor = $(input).val();
        var soloNumeros = valor.replace(/[^\d\s]/, ''); // Elimina todo excepto números
        var truncado = soloNumeros.slice(0, 10);
        $(input).val(truncado);

        if (valor !== truncado) {
            $('#' + label).text("Solo Numeros");
            $(input).css({ "border-color": "#F5B7B1", "background-color": "#F5B7B1" });
        } else {
            $('#' + label).text("");
            $(input).css({ "border-color": "green", "background-color": "#63f96f" });
        }
    }
</script>

<script>
    function soloLetrasNumeros(input, label) {
        var valor = input.value;
        var soloLetrasNumeros = valor.replace(/[^a-zA-Z0-9]/g, ''); // Elimina todo excepto letras y números
        var truncado = soloLetrasNumeros.slice(0, 10); // Limita la longitud a 10 caracteres
        input.value = truncado;

        if (valor !== truncado) {
            document.getElementById(label).innerText = "Solo letras y números";
            input.style.borderColor = "#F5B7B1";
            input.style.backgroundColor = "#F5B7B1";
        } else {
            document.getElementById(label).innerText = "";
            input.style.borderColor = "green";
            input.style.backgroundColor = "#63f96f";
        }
    }
</script>

<script>
    function soloNumerosDecimales(input, label) {
        var valor = $(input).val();

        // Elimina todo excepto números y un punto decimal
        var soloNumeros = valor.replace(/[^\d.]/g, '');

        // Actualiza el valor del input con los números y el punto decimal
        $(input).val(soloNumeros);

        // Verifica si el valor original y el valor filtrado son diferentes
        if (valor !== soloNumeros) {
            $('#' + label).text("Solo se permiten números y un punto decimal");
            $(input).css({ "border-color": "#F5B7B1", "background-color": "#F5B7B1" });
        } else {
            $('#' + label).text("");
            $(input).css({ "border-color": "green", "background-color": "#63f96f" });
        }
    }
</script>







<script type="text/javascript">

    let map;
    let clickCount = 0;

    async function initMap() {
        var address = document.getElementById("txtdireccion").value;

        // Request needed libraries.
        const { Map } = await google.maps.importLibrary("maps");

        if (address != "") {
            var geocodes = new google.maps.Geocoder();
            geocodes.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    position = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() };
                    createMap(position);
                }
            });
        } else {
            position = { lat: 19.430570307662446, lng: -99.16166352568936 };
            createMap(position);
        }
    }

    function createMap(position) {
        // The map, centered at the specified position
        map = new google.maps.Map(document.getElementById("map"), {
            zoom: 14,
            center: position,
            mapId: "DEMO_MAP_ID",
        });

        let infoWindow = new google.maps.InfoWindow({
            content: "Presiona la locación",
            position: position,
        });

        infoWindow.open(map);



        // Manejar el evento de clic en el mapa
        google.maps.event.addListener(map, 'click', function (event) {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({
                'latLng': event.latLng
            }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        if (clickCount === 0) {
                            // Primer clic: llenar el primer cuadro de texto
                            $("#txtOrigen").val(results[0].formatted_address);
                        } else if (clickCount === 1) {
                            // Segundo clic: llenar el segundo cuadro de texto
                            $("#txtdireccion").val(results[0].formatted_address);
                        }
                        // Incrementar el contador de clics
                        clickCount = (clickCount + 1) % 2;
                    }
                }
            });
        });
    }

    initMap();

</script>

