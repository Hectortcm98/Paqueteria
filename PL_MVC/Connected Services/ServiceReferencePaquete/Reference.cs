//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PL_MVC.ServiceReferencePaquete {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePaquete.IPaquetes")]
    public interface IPaquetes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/GetAll", ReplyAction="http://tempuri.org/IPaquetes/GetAllResponse")]
        System.ValueTuple<bool, string, ML.Paquete[], System.Exception> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/GetAll", ReplyAction="http://tempuri.org/IPaquetes/GetAllResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete[], System.Exception>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/Add", ReplyAction="http://tempuri.org/IPaquetes/AddResponse")]
        System.ValueTuple<bool, string, ML.Paquete, System.Exception> Add(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/Add", ReplyAction="http://tempuri.org/IPaquetes/AddResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> AddAsync(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/UpdateEF", ReplyAction="http://tempuri.org/IPaquetes/UpdateEFResponse")]
        System.ValueTuple<bool, string, ML.Paquete, System.Exception> UpdateEF(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/UpdateEF", ReplyAction="http://tempuri.org/IPaquetes/UpdateEFResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> UpdateEFAsync(ML.Paquete paquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/GetById", ReplyAction="http://tempuri.org/IPaquetes/GetByIdResponse")]
        System.ValueTuple<bool, string, ML.Paquete, System.Exception> GetById(int IdPaquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/GetById", ReplyAction="http://tempuri.org/IPaquetes/GetByIdResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> GetByIdAsync(int IdPaquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/DeleteLINQ", ReplyAction="http://tempuri.org/IPaquetes/DeleteLINQResponse")]
        System.ValueTuple<bool, string, System.Exception> DeleteLINQ(int IdPaquete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaquetes/DeleteLINQ", ReplyAction="http://tempuri.org/IPaquetes/DeleteLINQResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> DeleteLINQAsync(int IdPaquete);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaquetesChannel : PL_MVC.ServiceReferencePaquete.IPaquetes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaquetesClient : System.ServiceModel.ClientBase<PL_MVC.ServiceReferencePaquete.IPaquetes>, PL_MVC.ServiceReferencePaquete.IPaquetes {
        
        public PaquetesClient() {
        }
        
        public PaquetesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaquetesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaquetesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaquetesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.ValueTuple<bool, string, ML.Paquete[], System.Exception> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete[], System.Exception>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.ValueTuple<bool, string, ML.Paquete, System.Exception> Add(ML.Paquete paquete) {
            return base.Channel.Add(paquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> AddAsync(ML.Paquete paquete) {
            return base.Channel.AddAsync(paquete);
        }
        
        public System.ValueTuple<bool, string, ML.Paquete, System.Exception> UpdateEF(ML.Paquete paquete) {
            return base.Channel.UpdateEF(paquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> UpdateEFAsync(ML.Paquete paquete) {
            return base.Channel.UpdateEFAsync(paquete);
        }
        
        public System.ValueTuple<bool, string, ML.Paquete, System.Exception> GetById(int IdPaquete) {
            return base.Channel.GetById(IdPaquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, ML.Paquete, System.Exception>> GetByIdAsync(int IdPaquete) {
            return base.Channel.GetByIdAsync(IdPaquete);
        }
        
        public System.ValueTuple<bool, string, System.Exception> DeleteLINQ(int IdPaquete) {
            return base.Channel.DeleteLINQ(IdPaquete);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string, System.Exception>> DeleteLINQAsync(int IdPaquete) {
            return base.Channel.DeleteLINQAsync(IdPaquete);
        }
    }
}
